char *plainTextToCipherText(char plainText[],int n)
{
    int i,j,counter,limit,index=0,len;
    char *cipherText;
    len=strlen(plainText);
    cipherText=(char*)malloc(sizeof(char)*(len+1));
    for(i=0;i<n;i++)
 {
  counter=0;
  for(j=i;j<len;j+=limit)
  {
   cipherText[index++]=plainText[j];
   if(i==0 || i==n-1)
       limit=2*n-2;
   else if(counter%2==0)
    limit=2*(n-i-1);
   else
    limit=2*i;
   if(limit<=0)
       break;
   counter++;
  }
 }
 cipherText[index]='\0';
 return cipherText;
}
int main()
{
 int n;
 char plainText[100];
 printf("Enter the plain text : ");
 scanf("%s",plainText);
 printf("Enter the value of n : ");
 scanf("%d",&n);
    printf("%s\n",plainTextToCipherText(plainText,n)); 
 return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


/*
void railFence(char *message, char *cipherText, int length, int A);
{
    char array [N]
}

int main() {
	char output[1024];
	railFence("this is a test message", output, 0, 4);
	printf("%s\n", output);
}

void railFence(char *message, char *cipherText, int length, int A) {
	char grid[strlen(message)][A];
	int rail, i = 0, j = 0;

}
*/
void railFence(char *message, char *cipherText, int length, int A);
void railFence2(char *message, char *cipherText, int length, int A, int B, int dir);
int input(); //function prototype for a function that reads the user's input and returns that value
int main()
{
    int choice; // Declaration of choice as a variable to enable the switch function to work
    printf("Select 1 to encrypt a rail cipher\n"); //user driven menu; all options will be displayed and the user will be asked to input their choice
    printf("Select 2 to encrypt a 2-level rail cipher\n");
    printf("Select 3 to decrypt a 2-level rail cipher\n");
    printf("Enter your choice: \n");
    choice=input(); //input() function is called and the user input is assigned to 'choice'

    switch (choice)
    {
    case 1:
        {
            //insert code to encrypt a RF cipher
            break;
        }
    case 2:
        {
            //insert code to encrypt a 2-level RFcipher
            break;
        }
    default:
        printf("Wrong input\n");
    }


    return 0;
}

//function defintions?
int input() // input() function when called reads the user's input and stores that in 'number', value is then returned to the point where it is called
{
    int number;
    scanf("%d", &number);
    return (number);
}

//int length, a, i, j;
    //char *message, *cipherText;
    //length=strlen(*cipherText);

    //char grid[strlen(message)][A];
	//int rail, i = 0, j = 0;
	/*int rail, i=0, j=0;
	char result;
	char grid[A][strlen(message)]; //Setting up the grid to insert plain text to be encrypted
	for (int i=0; i<A; i++) //filling in the matrix with our message, distiguishes filled spaces from empty spaces
        for (int j=0; j<strlen(message); j++)
        rail[i][j]=*cipherText; //this should either be rail or grid {not sure yet}

    for(int i=0; i<A; i++)
        for (int j=0; j<strlen(message); j++)
    if(rail[i][j]!=*cipherText)
        result=(rail[i][j]);
    return result;
    */
     /*while(j<length)
    {
        if(length%2==0)
        {
            for(i=0;i<rail;i++)
            {
                grid[i][j]=(int)cipherText[j];
                j++;
            }
        }
        else
        {
            for(i=rail-2;i>0;i--)
            {
                grid[i][j]=(int)cipherText[j];
                j++;
            }
        }
    }

      for(i=0;i<rail;i++)
      {
          for(j=0;j<length;j++)
          {
              if(grid[i][j]!=0)
                printf("%c", grid[i][j]);
          }
      }
    printf("\n");
    return cipherText;
*/


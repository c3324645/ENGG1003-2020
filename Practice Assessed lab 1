// Practice Assessed lab 1 - Pass/credit level

int main()
{
    float x0=0.65;
    float xn;
    float xnml=0.65;
    int n=1;

    printf("%d %.6f\n", n, x0);

    xn=x0;

    while(n<10 || xn-xnml<0.001)
    {
        xn=(0.2*xnml)+5;

        printf("%d %.6f\n", n, xn);
        xnml=xn;
        xn++;
        n++;

    }

    return 0;
}

//Task 2: D/HD level --> this code is worth 4/5 marks therefore a distiction
int main ()
{
    double x0=1.47, x1=0.14, xn=0, xnm1=x1, xnm2=x0; //could probably just be a float but playing it safe by making the data type bigger
    int n=0; //this is our 'count' will show what iteration we are up to

    printf("%d %f\n", n, x0);
    n++;
    printf("%d %f\n", n, x1);
    n++; //making sure the count increases here so that the output shows 1 0.14 and making sure that the while loop will start at 2
//how do i make this 'printing x0&x1 more simple -> can i make in in one print statement? rather than doing it seperately

    while(n<=10 || xn>1*10e10) //|| is the symbol for 'OR' and && is the symbol for 'AND'
    {
        xn=0.8*xnm1-0.2*xnm2;

        printf("%d %f\n", n, xn);
        xnm2=xnm1;
        xnm1=xn;
        xn++;
        n++;
    }


    return 0;
}

//code works -->task above continued but now satisfies the HD requirements --> need a better understanding of flagging

int main ()
{
    double x0=1.47, x1=0.14, xn=0, xnm1=x1, xnm2=x0; //could probably just be a float but playing it safe by making the data type bigger
    int n=0; //this is our 'count' will show what iteration we are up to


    printf("%d %f\n", n, x0);
    n++;
    printf("%d %f\n", n, x1);
    n++; //making sure the count increases here so that the output shows 1 0.14 and making sure that the while loop will start at 2
//how do i make this 'printing x0&x1 more simple -> can i make in in one print statement? rather than doing it seperately

    while(n<=10 || xn>1*10e10) //|| is the symbol for 'OR' and && is the symbol for 'AND'
    {
        xn=0.8*xnm1-0.2*xnm2;

        printf("%d %f\n", n, xn);
        xnm2=xnm1;
        xnm1=xn;
        xn++;
        n++;
    }

    double dxn=0; //intialising new variable --> dxn represents the first derivative of the eqn above
    dxn=xn-xnm1; //differential eqn

    for (n=1; n<10; n++)
    {
        //if there are both positive and negative signs than dxn varies
        if((n>=0 && xn<0) || (n<0 && xn>=0))
           {
               dxn=1; //if this conditon is met we make dxn=1 and then break the loop??
               break;
           }
    }

    if(dxn==1) //if dxn has different signs it varies
    {
        printf("\nThe sign of dx/dn varies. \n");
    }
    else
    {
        if(xn>=0) //
        {
            printf("\nThe sign of dx/dn is always positive or zero. \n");
        }
        else
        {
            printf("\nThe sign of dx/dn is always negative. \n");
        }
    }


    return 0;
}

//Correct code for the pass/credit level question

int main()
{
    float x0=0.65;
    float xn;
    float xnml=0.65;
    int n=1;

    printf("%d %.6f\n", n, x0);

    xn=x0;

    while(n<10)// removed this from inside the bracket (&& xn-xnml<0.001)
    {

        xn=(0.2*xnml)+5;
        printf("%d %.6f\n", n, xn);

        if((xn-xnml)<0.001)
        {
            break;
        }
        xnml=xn;
        xn++;
        n++;

    }

    return 0;
}


//correct code for D/HD Task
int main ()
{
    double x0=1.47, x1=0.14, xn=0, xnm1=x1, xnm2=x0; //could probably just be a float but playing it safe by making the data type bigger
    int n=0; //this is our 'count' will show what iteration we are up to

    printf("%d %f\n", n, x0);
    n++;
    printf("%d %f\n", n, x1);
    n++; //making sure the count increases here so that the output shows 1 0.14 and making sure that the while loop will start at 2
//how do i make this 'printing x0&x1 more simple -> can i make in in one print statement? rather than doing it seperately
double dxn=0; //intialising new variable --> dxn represents the first derivative of the eqn above
   char posflag=0;
   char negflag=0;

   dxn=x0-x1;
        if(dxn<0) negflag=1;
        else posflag=1;

    while(n<=10 && xn<=1*10e10)
    {
        xn=0.8*xnm1-0.2*xnm2;

        printf("%d %f\n", n, xn);

        dxn=xn-xnm1;
        if(dxn<0) negflag=1;
        else posflag=1;

        xnm2=xnm1;
        xnm1=xn;
        n++;

    }

    if(posflag && negflag)printf("\nThe sign of dx/dn varies. \n");
    else if(posflag)printf("\nThe sign of dx/dn is always positive or zero. \n");
    else if(negflag)printf("\nThe sign of dx/dn is always negative. \n");

    return 0;
}

//assessment task examples: Easy(ish) assessment task from wk3 lecture 2 -> xn=3xnm1+2xn2, x1=3, x2=1, exit at x8 or xn>100
int main()
{
    float xn, xnm1=1, xnm2=3;
    int n=3; //the first unknown is x for n=3

    printf("1 %f\n", xnm2); //x1 and x2 are given so just hardcode n
    printf("2 %f\n", xnm1);

    while((n<=8) && (xn<100))
    {
        xn=3.0*xnm1+2*xnm2;
        printf("%d %f\n", n, xn);
        xnm2=xnm1;
        xnm1=xn;
        n++;
    }
    return 0;
